name: Backend CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'Lab4/TripOrganizer.API/**'
      - 'Lab4/TripOrganizer.API.Tests/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'Lab4/TripOrganizer.API/**'
      - 'Lab4/TripOrganizer.API.Tests/**'
      - '.github/workflows/backend-ci.yml'
  workflow_call:

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: 'Lab4/TripOrganizer.API'
  TEST_PROJECT_PATH: 'Lab4/TripOrganizer.API.Tests'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: triporganizer_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore Lab4/Lab4.sln

    - name: Build solution
      run: dotnet build Lab4/Lab4.sln --no-restore --configuration Release

    - name: Run unit tests
      run: dotnet test ${{ env.TEST_PROJECT_PATH }} --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

    - name: Run integration tests
      run: dotnet test ${{ env.TEST_PROJECT_PATH }} --no-build --configuration Release --verbosity normal --filter Category=Integration
      env:
        ConnectionStrings__DefaultConnection: "Server=localhost;Port=5432;Database=triporganizer_test;Username=postgres;Password=postgres;"

    - name: Generate code coverage report
      uses: danielpalme/ReportGenerator-GitHub-Action@5.1.26
      with:
        reports: coverage/**/coverage.cobertura.xml
        targetdir: coveragereport
        reporttypes: Html;Cobertura;MarkdownSummaryGithub

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage-report
        path: coveragereport
        retention-days: 30

    - name: Add coverage to PR
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: coveragereport/SummaryGithub.md

    - name: Test API health endpoint
      run: |
        dotnet run --project ${{ env.PROJECT_PATH }} --configuration Release &
        API_PID=$!
        
        # Wait for API to start
        for i in {1..30}; do
          if curl -f http://localhost:5000/health >/dev/null 2>&1; then
            echo "API is healthy!"
            break
          fi
          echo "Waiting for API to start... ($i/30)"
          sleep 2
        done
        
        # Test health endpoint
        curl -f http://localhost:5000/health || (echo "Health check failed!" && exit 1)
        
        # Clean up
        kill $API_PID
      env:
        ConnectionStrings__DefaultConnection: "Server=localhost;Port=5432;Database=triporganizer_test;Username=postgres;Password=postgres;"
        ASPNETCORE_URLS: "http://localhost:5000"

    - name: Generate build summary
      if: always()
      run: |
        echo "## Backend CI Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Project**: TripOrganizer.API" >> $GITHUB_STEP_SUMMARY
        echo "- **Target Framework**: .NET ${{ env.DOTNET_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Configuration**: Release" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "coveragereport/Summary.txt" ]; then
          echo "- **Code Coverage**: $(cat coveragereport/Summary.txt | grep -oP 'Line coverage: \K[0-9.]+%')" >> $GITHUB_STEP_SUMMARY
        fi
